name: Continuous integration
on: [push, pull_request]

env:
  # Only used for the cache key. Increment version to force clean build.
  GODOT_BASE_BRANCH: master
  # Used to select the version of Godot to run the tests with.
  GODOT_TEST_VERSION: master

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🐧 Linux (GCC)
            os: ubuntu-20.04
            platform: linux
            artifact-name: godot-cpp-space-linux-glibc2.27-x86_64-release
            artifact-path: space/bin/libspace.linux.template_release.x86_64.so
            artifact-name-debug: godot-cpp-space-linux-glibc2.27-x86_64-debug
            artifact-path-debug: space/bin/libspace.linux.template_debug.x86_64.so
            run-tests: false
            cache-name: linux-x86_64
            
          - name: 🏁 Windows (x86_64, MSVC)
            os: windows-2019
            platform: windows
            artifact-name: godot-cpp-space-windows-msvc2019-x86_64-release
            artifact-path: space/bin/libspace.windows.template_release.x86_64.lib
            artifact-name-debug: godot-cpp-space-windows-msvc2019-x86_64-debug
            artifact-path-debug: space/bin/libspace.windows.template_debug.x86_64.dll
            run-tests: false
            cache-name: windows-x86_64-msvc

          - name: 🍎 macOS (universal)
            os: macos-latest
            platform: macos
            artifact-name: godot-cpp-space-macos-universal-release
            artifact-path: space/bin/libspace.macos.template_release.framework
            artifact-name-debug: godot-cpp-space-macos-universal-debug
            artifact-path-debug: space/bin/libspace.macos.template_debug.framework
            flags: arch=universal
            run-tests: false
            cache-name: macos-universal

    env:
      SCONS_CACHE: ${{ github.workspace }}/.scons-cache/
      EM_VERSION: 3.1.39
      EM_CACHE_FOLDER: "emsdk-cache"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Set up Python (for SCons)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Android dependencies
        if: ${{ matrix.platform == 'android' }}
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r23c
          link-to-sdk: true

      - name: Web dependencies
        if: ${{ matrix.platform == 'web' }}
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}

      - name: Setup MinGW for Windows/MinGW build
        if: ${{ matrix.platform == 'windows' && matrix.flags == 'use_mingw=yes' }}
        uses: egor-tensin/setup-mingw@v2
        with:
          version: 12.2.0

      - name: Install scons
        run: |
          python -m pip install scons==4.0.0

      - name: Generate godot-cpp sources only
        run: |
          scons platform=${{ matrix.platform }} verbose=yes build_library=no ${{ matrix.flags }}
          scons -c

      - name: Build godot-cpp (debug)
        run: |
          scons platform=${{ matrix.platform }} verbose=yes target=template_debug ${{ matrix.flags }}

      - name: Build space without rebuilding godot-cpp (debug)
        run: |
          cd space
          scons platform=${{ matrix.platform }} target=template_debug ${{ matrix.flags }} build_library=no

      - name: Build space and godot-cpp (release)
        run: |
          cd space 
          scons platform=${{ matrix.platform }} verbose=yes target=template_release ${{ matrix.flags }}

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Download latest Godot artifacts
        uses: dsnopek/action-download-artifact@1322f74e2dac9feed2ee76a32d9ae1ca3b4cf4e9
        if: ${{ matrix.run-tests && env.GODOT_TEST_VERSION == 'master' }}
        with:
          repo: godotengine/godot
          branch: master
          event: push
          workflow: linux_builds.yml
          workflow_conclusion: success
          name: linux-editor-mono
          search_artifacts: true
          check_artifacts: true
          ensure_latest: true
          path: godot-artifacts

      - name: Prepare Godot artifacts for testing
        if: ${{ matrix.run-tests && env.GODOT_TEST_VERSION == 'master' }}
        run: |
          chmod +x ./godot-artifacts/godot.linuxbsd.editor.x86_64.mono
          echo "GODOT=$(pwd)/godot-artifacts/godot.linuxbsd.editor.x86_64.mono" >> $GITHUB_ENV

      - name: Download requested Godot version for testing
        if: ${{ matrix.run-tests && env.GODOT_TEST_VERSION != 'master' }}
        run: |
          wget "https://github.com/godotengine/godot-builds/releases/download/${GODOT_TEST_VERSION}/Godot_v${GODOT_TEST_VERSION}_linux.x86_64.zip" -O Godot.zip
          unzip -a Godot.zip
          chmod +x "Godot_v${GODOT_TEST_VERSION}_linux.x86_64"
          echo "GODOT=$(pwd)/Godot_v${GODOT_TEST_VERSION}_linux.x86_64" >> $GITHUB_ENV

      - name: Run tests
        if: ${{ matrix.run-tests }}
        run: |
          $GODOT --headless --version
          cd test
          # Need to run the editor so .godot is generated... but it crashes! Ignore that :-)
          (cd project && (timeout 30 $GODOT --import --headless >/dev/null 2>&1 || true))
          ./run-tests.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}
          if-no-files-found: error

  pack:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Pack artifacts
        run: |
          ls -alh
          mkdir libspace.macos.template_debug.framework
          mv godot-cpp-space-macos-universal-debug/libspace.macos.template_debug libspace.macos.template_debug.framework
          mkdir libspace.macos.template_release.framework
          mv godot-cpp-space-macos-universal-release/libspace.macos.template_release libspace.macos.template_release.framework
          zip -rj space-bin.zip . -i *dll *lib *so
          zip -r space-bin.zip libspace.macos*
        
      - name: Upload packed artifacts
        uses: actions/upload-artifact@v3
        with:
          name: space-bin.zip
          path: space-bin.zip
          if-no-files-found: error
